//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using pxblobtracker = Microsoft.Robotics.Services.Sample.BlobTracker.Proxy;
using reflection = System.Reflection;


namespace Microsoft.Robotics.Services.Sample.BlobTracker.Proxy
{
    
    
    /// <summary>
    /// BlobTracker Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the BlobTracker service
        public const String Identifier = "http://schemas.microsoft.com/robotics/2007/03/blobtracker.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// The blob tracker 's state.
    /// </summary>
    [Description("The blob tracker\'s state.")]
    [DataContract()]
    [XmlRootAttribute("BlobTrackerState", Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.html")]
    public class BlobTrackerState : ICloneable, IDssSerializable
    {
        
        private List<ColorBin> _colorBins = new List<ColorBin>();
        
        private DateTime _timeStamp;
        
        private List<FoundBlob> _results = new List<FoundBlob>();
        
        /// <summary>
        /// Color Bins
        /// </summary>
        [DataMember(IsRequired=true)]
        [Description("The set of color bins.")]
        public List<ColorBin> ColorBins
        {
            get
            {
                return this._colorBins;
            }
            set
            {
                this._colorBins = value;
            }
        }
        
        /// <summary>
        /// Time Stamp
        /// </summary>
        [DataMember()]
        [Browsable(false)]
        public DateTime TimeStamp
        {
            get
            {
                return this._timeStamp;
            }
            set
            {
                this._timeStamp = value;
            }
        }
        
        /// <summary>
        /// Results
        /// </summary>
        [DataMember(IsRequired=true)]
        [Browsable(false)]
        [Description("The list of matching blobs found.")]
        public List<FoundBlob> Results
        {
            get
            {
                return this._results;
            }
            set
            {
                this._results = value;
            }
        }
        
        /// <summary>
        /// Copy To Blob Tracker State
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            BlobTrackerState typedTarget = target as BlobTrackerState;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);

            // copy IEnumerable System.Collections.Generic.List<ColorBin> ColorBins
            if (this.ColorBins != null)
            {
                typedTarget.ColorBins = new System.Collections.Generic.List<ColorBin>();
                foreach(ColorBin elem in ColorBins)
                {
                    typedTarget.ColorBins.Add((elem == null) ? null : (ColorBin)((Microsoft.Dss.Core.IDssSerializable)elem).Clone());
                }
            }
            typedTarget.TimeStamp = this.TimeStamp;

            // copy IEnumerable System.Collections.Generic.List<FoundBlob> Results
            if (this.Results != null)
            {
                typedTarget.Results = new System.Collections.Generic.List<FoundBlob>();
                foreach(FoundBlob elem in Results)
                {
                    typedTarget.Results.Add((elem == null) ? null : (FoundBlob)((Microsoft.Dss.Core.IDssSerializable)elem).Clone());
                }
            }
        }
        
        /// <summary>
        /// Clone Blob Tracker State
        /// </summary>
        public virtual object Clone()
        {
            BlobTrackerState target = new BlobTrackerState();


            // copy IEnumerable System.Collections.Generic.List<ColorBin> ColorBins
            if (this.ColorBins != null)
            {
                target.ColorBins = new System.Collections.Generic.List<ColorBin>();
                foreach(ColorBin elem in ColorBins)
                {
                    target.ColorBins.Add((elem == null) ? null : (ColorBin)((Microsoft.Dss.Core.IDssSerializable)elem).Clone());
                }
            }
            target.TimeStamp = this.TimeStamp;

            // copy IEnumerable System.Collections.Generic.List<FoundBlob> Results
            if (this.Results != null)
            {
                target.Results = new System.Collections.Generic.List<FoundBlob>();
                foreach(FoundBlob elem in Results)
                {
                    target.Results.Add((elem == null) ? null : (FoundBlob)((Microsoft.Dss.Core.IDssSerializable)elem).Clone());
                }
            }
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            if (ColorBins == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(this.ColorBins.Count);
                for(int index1367820626 = 0; index1367820626 < this.ColorBins.Count; index1367820626++)
                {
                    if (ColorBins[index1367820626] == null) writer.Write((byte)0);
                    else
                    {
                        // null flag
                        writer.Write((byte)1);

                        ((Microsoft.Dss.Core.IDssSerializable)ColorBins[index1367820626]).Serialize(writer);
                    }
                }
            }

            Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(TimeStamp, writer);

            if (Results == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(this.Results.Count);
                for(int index2001579620 = 0; index2001579620 < this.Results.Count; index2001579620++)
                {
                    if (Results[index2001579620] == null) writer.Write((byte)0);
                    else
                    {
                        // null flag
                        writer.Write((byte)1);

                        ((Microsoft.Dss.Core.IDssSerializable)Results[index2001579620]).Serialize(writer);
                    }
                }
            }

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            if (reader.ReadByte() == 0) {}
            else
            {
                int count2927146670 = reader.ReadInt32();
                ColorBins = new System.Collections.Generic.List<ColorBin>();
                for(int index1367820626 = 0; index1367820626< count2927146670; index1367820626++)
                {
                    ColorBins.Add(null);
                    if (reader.ReadByte() == 0) {}
                    else
                    {
                        ColorBins[index1367820626] = (ColorBin)((Microsoft.Dss.Core.IDssSerializable)new ColorBin()).Deserialize(reader);
                    } //nullable
                }
            } //nullable

            TimeStamp = Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);

            if (reader.ReadByte() == 0) {}
            else
            {
                int count2001579620 = reader.ReadInt32();
                Results = new System.Collections.Generic.List<FoundBlob>();
                for(int index2001579620 = 0; index2001579620< count2001579620; index2001579620++)
                {
                    Results.Add(null);
                    if (reader.ReadByte() == 0) {}
                    else
                    {
                        Results[index2001579620] = (FoundBlob)((Microsoft.Dss.Core.IDssSerializable)new FoundBlob()).Deserialize(reader);
                    } //nullable
                }
            } //nullable

            return this;

        }
    }
    
    /// <summary>
    /// Image Processed Request
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ImageProcessedRequest", Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.html")]
    public class ImageProcessedRequest : ICloneable, IDssSerializable
    {
        
        private DateTime _timeStamp;
        
        private List<FoundBlob> _results = new List<FoundBlob>();
        
        /// <summary>
        /// Time Stamp
        /// </summary>
        [DataMember()]
        [Description("Indicates the time the image was processed.")]
        public DateTime TimeStamp
        {
            get
            {
                return this._timeStamp;
            }
            set
            {
                this._timeStamp = value;
            }
        }
        
        /// <summary>
        /// Results
        /// </summary>
        [DataMember(IsRequired=true)]
        [Description("The list of blobs found.")]
        public List<FoundBlob> Results
        {
            get
            {
                return this._results;
            }
            set
            {
                this._results = value;
            }
        }
        
        /// <summary>
        /// Copy To Image Processed Request
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            ImageProcessedRequest typedTarget = target as ImageProcessedRequest;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.TimeStamp = this.TimeStamp;

            // copy IEnumerable System.Collections.Generic.List<FoundBlob> Results
            if (this.Results != null)
            {
                typedTarget.Results = new System.Collections.Generic.List<FoundBlob>();
                foreach(FoundBlob elem in Results)
                {
                    typedTarget.Results.Add((elem == null) ? null : (FoundBlob)((Microsoft.Dss.Core.IDssSerializable)elem).Clone());
                }
            }
        }
        
        /// <summary>
        /// Clone Image Processed Request
        /// </summary>
        public virtual object Clone()
        {
            ImageProcessedRequest target = new ImageProcessedRequest();

            target.TimeStamp = this.TimeStamp;

            // copy IEnumerable System.Collections.Generic.List<FoundBlob> Results
            if (this.Results != null)
            {
                target.Results = new System.Collections.Generic.List<FoundBlob>();
                foreach(FoundBlob elem in Results)
                {
                    target.Results.Add((elem == null) ? null : (FoundBlob)((Microsoft.Dss.Core.IDssSerializable)elem).Clone());
                }
            }
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(TimeStamp, writer);

            if (Results == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(this.Results.Count);
                for(int index2001579620 = 0; index2001579620 < this.Results.Count; index2001579620++)
                {
                    if (Results[index2001579620] == null) writer.Write((byte)0);
                    else
                    {
                        // null flag
                        writer.Write((byte)1);

                        ((Microsoft.Dss.Core.IDssSerializable)Results[index2001579620]).Serialize(writer);
                    }
                }
            }

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            TimeStamp = Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);

            if (reader.ReadByte() == 0) {}
            else
            {
                int count2001579620 = reader.ReadInt32();
                Results = new System.Collections.Generic.List<FoundBlob>();
                for(int index2001579620 = 0; index2001579620< count2001579620; index2001579620++)
                {
                    Results.Add(null);
                    if (reader.ReadByte() == 0) {}
                    else
                    {
                        Results[index2001579620] = (FoundBlob)((Microsoft.Dss.Core.IDssSerializable)new FoundBlob()).Deserialize(reader);
                    } //nullable
                }
            } //nullable

            return this;

        }
    }
    
    /// <summary>
    /// Specifies a color bin (set).
    /// </summary>
    [Description("Specifies a color bin (set).")]
    [DataContract()]
    [XmlRootAttribute("ColorBin", Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.html")]
    public class ColorBin : ICloneable, IDssSerializable
    {
        
        private String _name;
        
        private Int32 _redMin;
        
        private Int32 _redMax;
        
        private Int32 _greenMin;
        
        private Int32 _greenMax;
        
        private Int32 _blueMin;
        
        private Int32 _blueMax;
        
        /// <summary>
        /// Name
        /// </summary>
        [DataMember()]
        [Description("Indicates the name of the color bin (set).")]
        public String Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        /// <summary>
        /// Red Min
        /// </summary>
        [DataMember()]
        [Description("Indicates minimum red value of the color bin.")]
        public Int32 RedMin
        {
            get
            {
                return this._redMin;
            }
            set
            {
                this._redMin = value;
            }
        }
        
        /// <summary>
        /// Red Max
        /// </summary>
        [DataMember()]
        [Description("Indicates maximum red value of the color bin.")]
        public Int32 RedMax
        {
            get
            {
                return this._redMax;
            }
            set
            {
                this._redMax = value;
            }
        }
        
        /// <summary>
        /// Green Min
        /// </summary>
        [DataMember()]
        [Description("Indicates minimum green value of the color bin.")]
        public Int32 GreenMin
        {
            get
            {
                return this._greenMin;
            }
            set
            {
                this._greenMin = value;
            }
        }
        
        /// <summary>
        /// Green Max
        /// </summary>
        [DataMember()]
        [Description("Indicates maximum green value of the color bin.")]
        public Int32 GreenMax
        {
            get
            {
                return this._greenMax;
            }
            set
            {
                this._greenMax = value;
            }
        }
        
        /// <summary>
        /// Blue Min
        /// </summary>
        [DataMember()]
        [Description("Indicates minimum blue value of the color bin.")]
        public Int32 BlueMin
        {
            get
            {
                return this._blueMin;
            }
            set
            {
                this._blueMin = value;
            }
        }
        
        /// <summary>
        /// Blue Max
        /// </summary>
        [DataMember()]
        [Description("Indicates maximum blue value of the color bin.")]
        public Int32 BlueMax
        {
            get
            {
                return this._blueMax;
            }
            set
            {
                this._blueMax = value;
            }
        }
        
        /// <summary>
        /// Copy To Color Bin
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            ColorBin typedTarget = target as ColorBin;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.Name = this.Name;
            typedTarget.RedMin = this.RedMin;
            typedTarget.RedMax = this.RedMax;
            typedTarget.GreenMin = this.GreenMin;
            typedTarget.GreenMax = this.GreenMax;
            typedTarget.BlueMin = this.BlueMin;
            typedTarget.BlueMax = this.BlueMax;
        }
        
        /// <summary>
        /// Clone Color Bin
        /// </summary>
        public virtual object Clone()
        {
            ColorBin target = new ColorBin();

            target.Name = this.Name;
            target.RedMin = this.RedMin;
            target.RedMax = this.RedMax;
            target.GreenMin = this.GreenMin;
            target.GreenMax = this.GreenMax;
            target.BlueMin = this.BlueMin;
            target.BlueMax = this.BlueMax;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            if (Name == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(Name);
            }

            writer.Write(RedMin);

            writer.Write(RedMax);

            writer.Write(GreenMin);

            writer.Write(GreenMax);

            writer.Write(BlueMin);

            writer.Write(BlueMax);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            if (reader.ReadByte() == 0) {}
            else
            {
                Name = reader.ReadString();
            } //nullable

            RedMin = reader.ReadInt32();

            RedMax = reader.ReadInt32();

            GreenMin = reader.ReadInt32();

            GreenMax = reader.ReadInt32();

            BlueMin = reader.ReadInt32();

            BlueMax = reader.ReadInt32();

            return this;

        }
    }
    
    /// <summary>
    /// Found Blob
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("FoundBlob", Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.html")]
    public class FoundBlob : ICloneable, IDssSerializable
    {
        
        private String _name;
        
        private Double _meanX;
        
        private Double _meanY;
        
        private Double _stdDevX;
        
        private Double _stdDevY;
        
        private Double _skewX;
        
        private Double _skewY;
        
        private Double _area;
        
        /// <summary>
        /// Name
        /// </summary>
        [DataMember()]
        [Description("Indicates the name of the blob.")]
        public String Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        /// <summary>
        /// MeanX
        /// </summary>
        [DataMember()]
        [Description("Indicates the X mean value.")]
        public Double MeanX
        {
            get
            {
                return this._meanX;
            }
            set
            {
                this._meanX = value;
            }
        }
        
        /// <summary>
        /// MeanY
        /// </summary>
        [DataMember()]
        [Description("Indicates the Y mean value.")]
        public Double MeanY
        {
            get
            {
                return this._meanY;
            }
            set
            {
                this._meanY = value;
            }
        }
        
        /// <summary>
        /// Std DevX
        /// </summary>
        [DataMember()]
        [Description("Indicates the X standard deviation value.")]
        public Double StdDevX
        {
            get
            {
                return this._stdDevX;
            }
            set
            {
                this._stdDevX = value;
            }
        }
        
        /// <summary>
        /// Std DevY
        /// </summary>
        [DataMember()]
        [Description("Indicates the Y standard deviation value.")]
        public Double StdDevY
        {
            get
            {
                return this._stdDevY;
            }
            set
            {
                this._stdDevY = value;
            }
        }
        
        /// <summary>
        /// SkewX
        /// </summary>
        [DataMember()]
        [Description("Indicates the X skew value.")]
        public Double SkewX
        {
            get
            {
                return this._skewX;
            }
            set
            {
                this._skewX = value;
            }
        }
        
        /// <summary>
        /// SkewY
        /// </summary>
        [DataMember()]
        [Description("Indicates the Y skew value.")]
        public Double SkewY
        {
            get
            {
                return this._skewY;
            }
            set
            {
                this._skewY = value;
            }
        }
        
        /// <summary>
        /// Area
        /// </summary>
        [DataMember()]
        [Description("Indicates area. This is the number of pixels that contribute to the blob.")]
        public Double Area
        {
            get
            {
                return this._area;
            }
            set
            {
                this._area = value;
            }
        }
        
        /// <summary>
        /// Copy To Found Blob
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            FoundBlob typedTarget = target as FoundBlob;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.Name = this.Name;
            typedTarget.MeanX = this.MeanX;
            typedTarget.MeanY = this.MeanY;
            typedTarget.StdDevX = this.StdDevX;
            typedTarget.StdDevY = this.StdDevY;
            typedTarget.SkewX = this.SkewX;
            typedTarget.SkewY = this.SkewY;
            typedTarget.Area = this.Area;
        }
        
        /// <summary>
        /// Clone Found Blob
        /// </summary>
        public virtual object Clone()
        {
            FoundBlob target = new FoundBlob();

            target.Name = this.Name;
            target.MeanX = this.MeanX;
            target.MeanY = this.MeanY;
            target.StdDevX = this.StdDevX;
            target.StdDevY = this.StdDevY;
            target.SkewX = this.SkewX;
            target.SkewY = this.SkewY;
            target.Area = this.Area;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            if (Name == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(Name);
            }

            writer.Write(MeanX);

            writer.Write(MeanY);

            writer.Write(StdDevX);

            writer.Write(StdDevY);

            writer.Write(SkewX);

            writer.Write(SkewY);

            writer.Write(Area);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            if (reader.ReadByte() == 0) {}
            else
            {
                Name = reader.ReadString();
            } //nullable

            MeanX = reader.ReadDouble();

            MeanY = reader.ReadDouble();

            StdDevX = reader.ReadDouble();

            StdDevY = reader.ReadDouble();

            SkewX = reader.ReadDouble();

            SkewY = reader.ReadDouble();

            Area = reader.ReadDouble();

            return this;

        }
    }
    
    /// <summary>
    /// Blob Tracker Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class BlobTrackerOperations : PortSet
    {
        
        /// <summary>
        /// Implicit Operator for Port of Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup
        /// </summary>
        /// <param name="portSet"></param>
        /// <returns></returns>
        public static implicit operator Port<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup>(BlobTrackerOperations portSet)
        {
            if (portSet == null) return null;
            return (Port<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup>)portSet[typeof(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup)];
        }

        /// <summary>
        /// Implicit Operator for Port of Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop
        /// </summary>
        /// <param name="portSet"></param>
        /// <returns></returns>
        public static implicit operator Port<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop>(BlobTrackerOperations portSet)
        {
            if (portSet == null) return null;
            return (Port<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop>)portSet[typeof(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop)];
        }

        /// <summary>
        /// Implicit Operator for Port of Get
        /// </summary>
        /// <param name="portSet"></param>
        /// <returns></returns>
        public static implicit operator Port<Get>(BlobTrackerOperations portSet)
        {
            if (portSet == null) return null;
            return (Port<Get>)portSet[typeof(Get)];
        }

        /// <summary>
        /// Implicit Operator for Port of ImageProcessed
        /// </summary>
        /// <param name="portSet"></param>
        /// <returns></returns>
        public static implicit operator Port<ImageProcessed>(BlobTrackerOperations portSet)
        {
            if (portSet == null) return null;
            return (Port<ImageProcessed>)portSet[typeof(ImageProcessed)];
        }

        /// <summary>
        /// Implicit Operator for Port of Subscribe
        /// </summary>
        /// <param name="portSet"></param>
        /// <returns></returns>
        public static implicit operator Port<Subscribe>(BlobTrackerOperations portSet)
        {
            if (portSet == null) return null;
            return (Port<Subscribe>)portSet[typeof(Subscribe)];
        }

        /// <summary>
        /// Implicit Operator for Port of InsertBin
        /// </summary>
        /// <param name="portSet"></param>
        /// <returns></returns>
        public static implicit operator Port<InsertBin>(BlobTrackerOperations portSet)
        {
            if (portSet == null) return null;
            return (Port<InsertBin>)portSet[typeof(InsertBin)];
        }

        /// <summary>
        /// Implicit Operator for Port of DeleteBin
        /// </summary>
        /// <param name="portSet"></param>
        /// <returns></returns>
        public static implicit operator Port<DeleteBin>(BlobTrackerOperations portSet)
        {
            if (portSet == null) return null;
            return (Port<DeleteBin>)portSet[typeof(DeleteBin)];
        }

        /// <summary>
        /// Implicit Operator for Port of UpdateBin
        /// </summary>
        /// <param name="portSet"></param>
        /// <returns></returns>
        public static implicit operator Port<UpdateBin>(BlobTrackerOperations portSet)
        {
            if (portSet == null) return null;
            return (Port<UpdateBin>)portSet[typeof(UpdateBin)];
        }

        /// <summary>
        /// Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public void Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup item) { base.PostUnknownType(item); }

        /// <summary>
        /// Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public void Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop item) { base.PostUnknownType(item); }

        /// <summary>
        /// Post(Get)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public void Post(Get item) { base.PostUnknownType(item); }

        /// <summary>
        /// Post(ImageProcessed)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public void Post(ImageProcessed item) { base.PostUnknownType(item); }

        /// <summary>
        /// Post(Subscribe)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public void Post(Subscribe item) { base.PostUnknownType(item); }

        /// <summary>
        /// Post(InsertBin)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public void Post(InsertBin item) { base.PostUnknownType(item); }

        /// <summary>
        /// Post(DeleteBin)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public void Post(DeleteBin item) { base.PostUnknownType(item); }

        /// <summary>
        /// Post(UpdateBin)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public void Post(UpdateBin item) { base.PostUnknownType(item); }

        
        /// <summary>
        /// Blob Tracker Operations
        /// </summary>
        public BlobTrackerOperations() : 
                base(typeof(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup), typeof(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop), typeof(Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get), typeof(Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed), typeof(Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe), typeof(Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin), typeof(Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin), typeof(Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin))
        {
        }
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<BlobTrackerState,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<BlobTrackerState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Image Processed Request
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,Fault> ImageProcessed()
        {
            ImageProcessedRequest body = new ImageProcessedRequest();
            ImageProcessed op = new ImageProcessed(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Image Processed and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,Fault> ImageProcessed(ImageProcessedRequest body)
        {
            ImageProcessed op = new ImageProcessed();
            op.Body = body ?? new ImageProcessedRequest();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Specifies a color bin (set).
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType,Fault> InsertBin()
        {
            ColorBin body = new ColorBin();
            InsertBin op = new InsertBin(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Insert Bin and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType,Fault> InsertBin(ColorBin body)
        {
            InsertBin op = new InsertBin();
            op.Body = body ?? new ColorBin();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Specifies a color bin (set).
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType,Fault> DeleteBin()
        {
            ColorBin body = new ColorBin();
            DeleteBin op = new DeleteBin(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Delete Bin and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType,Fault> DeleteBin(ColorBin body)
        {
            DeleteBin op = new DeleteBin();
            op.Body = body ?? new ColorBin();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Specifies a color bin (set).
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,Fault> UpdateBin()
        {
            ColorBin body = new ColorBin();
            UpdateBin op = new UpdateBin(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Update Bin and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,Fault> UpdateBin(ColorBin body)
        {
            UpdateBin op = new UpdateBin();
            op.Body = body ?? new ColorBin();
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Gets the current state of the service.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [Description("Gets the current state of the service.")]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<BlobTrackerState, Fault>>
    {
        
        /// <summary>
        /// Gets the current state of the service.
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Gets the current state of the service.
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Gets the current state of the service.
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<BlobTrackerState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Indicates when an image has been processed.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [Description("Indicates when an image has been processed.")]
    public class ImageProcessed : Microsoft.Dss.ServiceModel.Dssp.Update<ImageProcessedRequest, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, Fault>>
    {
        
        /// <summary>
        /// Indicates when an image has been processed.
        /// </summary>
        public ImageProcessed()
        {
        }
        
        /// <summary>
        /// Indicates when an image has been processed.
        /// </summary>
        public ImageProcessed(ImageProcessedRequest body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Indicates when an image has been processed.
        /// </summary>
        public ImageProcessed(ImageProcessedRequest body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Subscribe
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : Microsoft.Dss.ServiceModel.Dssp.Subscribe<Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, Fault>>
    {
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe()
        {
        }
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Inserts a color bin for processing /analysis.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [Description("Inserts a color bin for processing/analysis.")]
    public class InsertBin : Microsoft.Dss.ServiceModel.Dssp.Insert<ColorBin, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, Fault>>
    {
        
        /// <summary>
        /// Inserts a color bin for processing /analysis.
        /// </summary>
        public InsertBin()
        {
        }
        
        /// <summary>
        /// Inserts a color bin for processing /analysis.
        /// </summary>
        public InsertBin(ColorBin body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Inserts a color bin for processing /analysis.
        /// </summary>
        public InsertBin(ColorBin body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Deletes a color bin for processing /analysis.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [Description("Deletes a color bin for processing/analysis.")]
    public class DeleteBin : Microsoft.Dss.ServiceModel.Dssp.Delete<ColorBin, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, Fault>>
    {
        
        /// <summary>
        /// Deletes a color bin for processing /analysis.
        /// </summary>
        public DeleteBin()
        {
        }
        
        /// <summary>
        /// Deletes a color bin for processing /analysis.
        /// </summary>
        public DeleteBin(ColorBin body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Deletes a color bin for processing /analysis.
        /// </summary>
        public DeleteBin(ColorBin body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Updates a color bin for processing /analysis.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [Description("Updates a color bin for processing/analysis.")]
    public class UpdateBin : Microsoft.Dss.ServiceModel.Dssp.Update<ColorBin, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, Fault>>
    {
        
        /// <summary>
        /// Updates a color bin for processing /analysis.
        /// </summary>
        public UpdateBin()
        {
        }
        
        /// <summary>
        /// Updates a color bin for processing /analysis.
        /// </summary>
        public UpdateBin(ColorBin body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Updates a color bin for processing /analysis.
        /// </summary>
        public UpdateBin(ColorBin body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
