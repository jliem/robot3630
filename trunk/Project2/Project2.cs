//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using project2 = Robotics.Project2;

using blob = Microsoft.Robotics.Services.Sample.BlobTracker.Proxy;

using motioncontroller = Robotics.CoroBot.MotionController;

namespace Robotics.Project2
{
    
    
    /// <summary>
    /// Implementation class for Project2
    /// </summary>
    [DisplayName("Project2")]
    [Description("Service for CS 3630 project 2")]
    [Contract(Contract.Identifier)]
    public class Project2Service : DsspServiceBase
    {
        
        /// <summary>
        /// _state
        /// </summary>
        private Project2State _state = new Project2State();
        
        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/project2", AllowMultipleInstances=false)]
        private Project2Operations _mainPort = new Project2Operations();

        // Partner with blob tracker
        [Partner("BlobTracker", Contract = blob.Contract.Identifier,
                CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]
        blob.BlobTrackerOperations _blobPort = new blob.BlobTrackerOperations();
        blob.BlobTrackerOperations _blobNotify = new blob.BlobTrackerOperations();

        // Partner with motion controller
        [Partner("MotionController", Contract = motioncontroller.Contract.Identifier,
                CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]
        motioncontroller.MotionControllerOperations _motionPort = new motioncontroller.MotionControllerOperations();

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public Project2Service(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {
        }
        
        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
			base.Start();
			// Add service specific initialization here.

            _blobPort.Subscribe(_blobNotify);
            
            Activate<ITask>(Arbiter.Receive<blob.ImageProcessed>(true, _blobNotify, OnImageProcessed));
        }

        void OnImageProcessed(blob.ImageProcessed imageProcessed)
        {
            Console.WriteLine("Project 2 received ImageProcessed signal");

            if (imageProcessed.Body.Results.Count > 0)
            {

                // Display results for each blob found
                for (int i = 0; i < imageProcessed.Body.Results.Count; i++)
                {
                    blob.FoundBlob foundBlob = imageProcessed.Body.Results[i];

                    if (foundBlob.Area > 100) //object detected
                    {

                        Console.WriteLine("Blob detected at (" + foundBlob.MeanX + "," + foundBlob.MeanY + ")");
                    }
                    else
                    {
                        Console.WriteLine("Blob is too small: area=" + foundBlob.Area);
                    }
                }
            }
        }

        #region UNUSED
        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }

        #endregion
    }
}
