//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Net;
using System.Windows.Forms;
using System.Xml;
using W3C.Soap;
using motioncontroller = Robotics.CoroBot.MotionController;
using cbdrive = CoroWare.Robotics.Services.CoroBotDrive.Proxy;
using cbencoder = CoroWare.Robotics.Services.CoroBotMotorEncoders.Proxy;
using ds = Microsoft.Dss.Services.Directory;

using blob = Microsoft.Robotics.Services.Sample.BlobTracker.Proxy;

namespace Robotics.CoroBot.MotionController
{
    
    
    /// <summary>
    /// Implementation class for MotionController
    /// </summary>
    [DisplayName("MotionController")]
    [Description("CS3630 Project 1 - CoroBot Motion Controller")]
    [Contract(Contract.Identifier)]
    public class MotionControllerService : DsspServiceBase
    {
        protected const double RobotCircumference = .3302 * Math.PI;
        private enum DrivingStates { Stopped, TurningLeft, TurningRight, MovingForward };

        //Driving state members
        private DrivingStates drivingState;
        private LinkedList<Vector2> waypoints;
        private Vector2 prevWaypoint;
        private double prevHeading;
        private double amountToTurn;
        private double amountToDrive;
        private double prevLeftEncoderDistance;
        private double prevRightEncoderDistance;
        
        /// <summary>
        /// _state
        /// </summary>
        private MotionControllerState _state = new MotionControllerState();
        
        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/motioncontroller", AllowMultipleInstances=false)]
        private MotionControllerOperations _mainPort = new MotionControllerOperations();

        [Partner("drive", Contract = cbdrive.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExisting)]
        private cbdrive.CoroBotDriveOperations _drivePort = new cbdrive.CoroBotDriveOperations();
        [Partner("encoder", Contract = cbencoder.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExisting)]
        private cbencoder.CoroBotMotorEncodersOperations _encoderPort = new cbencoder.CoroBotMotorEncodersOperations();

        [Partner("BlobTracker", Contract = blob.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExisting)]
        blob.BlobTrackerOperations _blobPort = new blob.BlobTrackerOperations();
        blob.BlobTrackerOperations _blobNotify = new blob.BlobTrackerOperations();

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public MotionControllerService(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {
        }
        
        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
			base.Start();
			// Add service specific initialization here.
            LogInfo("In our start.");
            //SpawnIterator(ConnectToDriveService);

            // Subscribe to Drive service
            cbdrive.CoroBotDriveOperations drivePort = new cbdrive.CoroBotDriveOperations();
            _drivePort.Subscribe(drivePort);
            Activate(Arbiter.Receive<cbdrive.Replace>(true, drivePort, DriveHandler));

            // Subscribe to Encoder service
            cbencoder.CoroBotMotorEncodersOperations encoderPort = new cbencoder.CoroBotMotorEncodersOperations();
            _encoderPort.Subscribe(encoderPort);
            Activate(Arbiter.Receive<cbencoder.Replace>(true, encoderPort, EncoderHandler));

            // Subscribe to blob tracker
            _blobPort.Subscribe(_blobNotify);
            Activate<ITask>(Arbiter.Receive<blob.ImageProcessed>(true, _blobNotify, OnImageProcessed));

            drivingState = DrivingStates.Stopped;
            prevWaypoint = new Vector2(0, 0);
            prevHeading = Math.PI / 2;
            //InitializeWaypoints(new string[] { "0,1", "1,2", "0,3", "-1,2", "0,0" });
            //InitializeWaypoints(new string[] { "0,.3", ".3,.6", "0,.9", "-.3,.6", "0,0" });
            SetEncoderInterval(200);
        }

        void OnImageProcessed(blob.ImageProcessed imageProcessed)
        {
            
            if (imageProcessed.Body.Results.Count == 1)
            {
                if (imageProcessed.Body.Results[0].Area > 100) //object detected
                {
                    //_drivePort.SetDrivePower(0.5, 0.5);
                    MessageBox.Show("Object detected");
                }
                else //search object
                {
                    //_drivePort.SetDrivePower(-0.3, 0.3);
                    MessageBox.Show("No object found");
                }
            }
        }

        /// <summary>
        /// Example of how to read the robot's camera
        /// </summary>
        private Image getSnapshot()
        {
            System.Net.WebClient client = new WebClient();
            //client.DownloadFileCompleted += new AsyncCompletedEventHandler(client_DownloadCompleted);

            // TODO: Refactor this out
            String robotIP = "128.61.18.18";

            String fileDownloadLocation = @"C:\Documents and Settings\JL\Desktop\robot.jpg";

            try
            {
                // This is how to do it without downloading a file (untested)
                /*
                Stream input = client.OpenRead(new Uri("http://" + robotIP + ":50000/corobotcamera"));
                Image image = Image.FromStream(input);
                input.Close();
                return image;
                */

                client.DownloadFile(new Uri("http://" + robotIP + ":50000/corobotcamera"),
                    fileDownloadLocation);

                if (File.Exists(fileDownloadLocation))
                {
                    return Image.FromFile(fileDownloadLocation);
                }
            }
            catch (WebException we)
            {
                MessageBox.Show("Could not download " + we.Response.ResponseUri);
                MessageBox.Show(we.StackTrace);
            }

            return null;
        }

        private void InitializeWaypoints(string[] points)
        {
            waypoints = new LinkedList<Vector2>();
            foreach (string point in points)
            {
                string[] split = point.Split(',');
                double x = double.Parse(split[0]);
                double y = double.Parse(split[1]);
                waypoints.AddLast(new Vector2(x, y));
            }
            BeginNextWaypoint();
        }

        private void BeginNextWaypoint()
        {
            if (waypoints.Count == 0)
            {
                SendStopMessage();
                return;
            }
            
            Vector2 driveVector = waypoints.First.Value.Subtract(prevWaypoint);
            amountToDrive = driveVector.Norm;
            amountToTurn = driveVector.Angle - prevHeading;
            if (amountToTurn < -Math.PI) amountToTurn += (2 * Math.PI);
            if (amountToTurn > Math.PI) amountToTurn -= (2 * Math.PI);
            amountToTurn = GetWheelTurnDistance(amountToTurn);

            if (amountToTurn > 0)
            {
                SendTurnLeftMessage();
            }
            else if (amountToTurn < 0)
            {
                SendTurnRightMessage();
            }
            else
            {
                SendDriveForwardMessage();
            }
        }

        private void SetEncoderInterval(int m)
        {
            cbencoder.ResetEncodersMessage reset = new cbencoder.ResetEncodersMessage();
            reset.InSequenceNumber = 0;
            Activate(Arbiter.Choice(_encoderPort.ResetEncoders(reset),
                delegate(DefaultSubmitResponseType success) { LogInfo("Successfully reset encoders."); },
                delegate(Fault f) { LogError(f); }
            ));

            cbencoder.SetIntervalMessage newInterval = new cbencoder.SetIntervalMessage();
            newInterval.NewInterval = 250;
            newInterval.InSequenceNumber = 0;
            Activate(Arbiter.Choice(_encoderPort.SetInterval(newInterval),
                delegate(DefaultSubmitResponseType success) { LogInfo("Sucessfully set encoder interval."); },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void SendTurnLeftMessage()
        {
            drivingState = DrivingStates.TurningLeft;
            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = true;
            newState.Rotation = .4;
            newState.Translation = 0;
            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success) { },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void SendTurnRightMessage()
        {
            drivingState = DrivingStates.TurningRight;
            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = true;
            newState.Rotation = -.6;
            newState.Translation = 0;
            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success) { },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void SendDriveForwardMessage()
        {
            drivingState = DrivingStates.MovingForward;
            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = true;
            newState.Rotation = 0;
            newState.Translation = .6;
            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success) { },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void SendStopMessage()
        {
            drivingState = DrivingStates.Stopped;
            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = false;
            newState.Rotation = 0;
            newState.Translation = 0;
            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success) { },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void DriveHandler(cbdrive.Replace notification)
        {
            
        }

        private void EncoderHandler(cbencoder.Replace notification)
        {
            cbencoder.CoroBotMotorEncodersState s = notification.Body;
            double changeInLeft = s.LeftDistance - prevLeftEncoderDistance;
            prevLeftEncoderDistance = s.LeftDistance;
            double changeInRight = s.RightDistance - prevRightEncoderDistance;
            prevRightEncoderDistance = s.RightDistance;

            LogInfo("Encoder: " + changeInRight);

            switch (drivingState)
            {
                case DrivingStates.Stopped:
                    break;
                case DrivingStates.TurningLeft:
                    amountToTurn -= changeInRight;
                    if (amountToTurn <= 0)
                    {
                        SendDriveForwardMessage();
                    }
                    else
                    {
                        SendTurnLeftMessage();
                    }
                    break;
                case DrivingStates.TurningRight:
                    amountToTurn += changeInLeft;
                    if (amountToTurn >= 0)
                    {
                        SendDriveForwardMessage();
                    }
                    else
                    {
                        SendTurnRightMessage();
                    }
                    break;
                case DrivingStates.MovingForward:
                    amountToDrive -= changeInLeft;
                    if (amountToDrive <= 0)
                    {
                        prevHeading = waypoints.First.Value.Subtract(prevWaypoint).Angle;
                        prevWaypoint = waypoints.First.Value;
                        waypoints.RemoveFirst();
                        BeginNextWaypoint();
                    }
                    else
                    {
                        SendDriveForwardMessage();
                    }
                    break;
                default:
                    break;
            }
        }

        private double GetWheelTurnDistance(double theta)
        {
            double ratio = theta / (Math.PI * 2);
            return ratio * RobotCircumference;
        }

        private class Vector2
        {
            private double x, y;
            public double X { get { return x; } set { x = value; } }
            public double Y { get { return y; } set { y = value; } }
            public double Norm { get { return Math.Sqrt(x * x + y * y); } }
            public double Angle { get { return Math.Atan2(y,x); } }

            public Vector2 Clone()
            {
                return new Vector2(x,y);
            }

            public Vector2 Add(Vector2 v)
            {
                return new Vector2(x + v.X, y + v.Y);
            }

            public Vector2 Subtract(Vector2 v)
            {
                return new Vector2(x - v.X, y - v.Y);
            }

            public Vector2(double x, double y)
            {
                this.x = x;
                this.y = y;
            }
        }
        
        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }
    }
}
