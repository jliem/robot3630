//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#define SIMULATOR


using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using motioncontroller = Robotics.CoroBot.MotionController;
using cbdrive = CoroWare.Robotics.Services.CoroBotDrive.Proxy;
using cbencoder = CoroWare.Robotics.Services.CoroBotMotorEncoders.Proxy;
using cbir = CoroWare.Robotics.Services.CoroBotIR.Proxy;
using ds = Microsoft.Dss.Services.Directory;
using System.Net;
using System.IO;
using System.Timers;
using System.Windows.Forms;
using System.Drawing;


namespace Robotics.CoroBot.MotionController
{
    
    
    /// <summary>
    /// Implementation class for MotionController
    /// </summary>
    [DisplayName("MotionController")]
    [Description("CoroBot Simple Motion Controller - Project 3")]
    [Contract(Contract.Identifier)]
    public class MotionControllerService : DsspServiceBase
    {
        /// <summary>
        /// _state
        /// </summary>
        private MotionControllerState _state = new MotionControllerState();
        private int oldEncoderValue;

        String robotIP = "128.61.24.158";

        private const bool USE_LEFT_ENCODERS = false;

        private const double SIM_DRIVE_POWER = 0.6;
        private const double SIM_ROTATE_RIGHT_POWER = 0.2;
        private const double SIM_ROTATE_LEFT_POWER = 0.2;

        private const double DRIVE_POWER = 0.4;
        private const double ROTATE_RIGHT_POWER = 0.5;
        private const double ROTATE_LEFT_POWER = 0.5;

        /// <summary>
        /// Interval for the encoder timer.
        /// </summary>
        private const int ENCODER_POLLING_INTERVAL = 45;


        // DO NOT CHANGE THIS, IT WILL BE SET LATER
        private bool usingRealRobot = true;


        /// <summary>
        /// Distance of an obstacle in front where we will stop moving.
        /// </summary>
        private const double IR_CLOSE_DISTANCE = 0.3;

        /// <summary>
        /// When the robot is close to an obstacle going forward, how much should
        /// we reverse?
        /// </summary>
        private const double DISTANCE_TO_REVERSE = 0.5;

        private const int SUPER_FAKE_ENCODER_INTERVAL = 10;

        private double lastIrDistance;

        // Will be reset in constructor if on sim
        private double drivePower = DRIVE_POWER;
        private double rotateRightPower = ROTATE_RIGHT_POWER;
        private double rotateLeftPower = ROTATE_LEFT_POWER;

        
        private bool followingWaypoints = false;
        private bool pendingDrive = false;
        private bool checkNextWaypointScheduled = false;
        private bool firstWaypoint = false;
        private double turnMultiplier = .9;

        private int encoderCounter = 0;

        private LinkedList<Vector2> waypoints;
        private Vector2 prevWaypoint;
        private double prevHeading;
        private double amountToTurn;
        private double amountToDrive;


        private System.Timers.Timer motorTimer;
        private System.Timers.Timer fakeEncoderTimer;
        //private System.Timers.Timer irTimer;

        // Response objects
        private Drive myDrive = null;
        private Turn myTurn = null;
        private BeginWaypoint myBeginWaypoint = null;        

        
        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/motioncontroller", AllowMultipleInstances=false)]
        private MotionControllerOperations _mainPort = new MotionControllerOperations();

        [Partner("drive", Contract = cbdrive.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExisting)]
        private cbdrive.CoroBotDriveOperations _drivePort = new cbdrive.CoroBotDriveOperations();
        [Partner("encoder", Contract = cbencoder.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExisting)]
        private cbencoder.CoroBotMotorEncodersOperations _encoderPort = new cbencoder.CoroBotMotorEncodersOperations();

#if SIMULATOR
        [Partner("corobotir", Contract = cbir.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExisting)]
        cbir.CoroBotIROperations _irPort = new cbir.CoroBotIROperations();  
#endif

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public MotionControllerService(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {

#if SIMULATOR
            usingRealRobot = false;
#endif

            if (usingRealRobot)
            {
                drivePower = DRIVE_POWER;
                rotateRightPower = ROTATE_RIGHT_POWER;
                rotateLeftPower = ROTATE_LEFT_POWER;

                Console.WriteLine("Using real robot parameters, IP is " + robotIP);
            }
            else
            {
                drivePower = SIM_DRIVE_POWER;
                rotateRightPower = SIM_ROTATE_RIGHT_POWER;
                rotateLeftPower = SIM_ROTATE_LEFT_POWER;

                Console.WriteLine("Using simulator");
            }
        }


#if SIMULATOR
        private void IrOnTimedEvent(object source, ElapsedEventArgs e)
        {
            // Poll the IR sensor
            Activate(Arbiter.Choice(_irPort.Get(new GetRequestType()),
                delegate(cbir.CoroBotIRState success) { lastIrDistance = success.LastFrontRange; },
                delegate(Fault f) { LogError(f); }
            ));
        }
#endif

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
			base.Start();

            _state.Power = 0;

            // Subscribe to Encoder service
            cbencoder.CoroBotMotorEncodersOperations encoderPort = new cbencoder.CoroBotMotorEncodersOperations();
            _encoderPort.Subscribe(encoderPort);
            Activate(Arbiter.Receive<cbencoder.Replace>(true, encoderPort, EncoderHandler));

#if SIMULATOR
            cbir.CoroBotIROperations irPort = new cbir.CoroBotIROperations();
            _irPort.Subscribe(irPort);
            Activate(Arbiter.Receive<cbir.Replace>(true, irPort, IrHandler));
#endif

            SetEncoderInterval(ENCODER_POLLING_INTERVAL);

            System.Timers.Timer encoderTimer = new System.Timers.Timer();
            encoderTimer.Elapsed += new ElapsedEventHandler(EncoderOnTimedEvent);

            encoderTimer.Interval = 50;
            encoderTimer.Enabled = usingRealRobot;

            motorTimer = new System.Timers.Timer();
            motorTimer.Elapsed += new ElapsedEventHandler(MotorOnTimedEvent);
            motorTimer.Enabled = false;

            fakeEncoderTimer = new System.Timers.Timer();
            fakeEncoderTimer.Elapsed += new ElapsedEventHandler(FakeEncoderOnTimedEvent);
            fakeEncoderTimer.Interval = SUPER_FAKE_ENCODER_INTERVAL;
            fakeEncoderTimer.Enabled = false;

            prevWaypoint = new Vector2(0, 0);

            InitializeWaypoints(new string[] { "0,1", "1,2", "0,3", "-1,2", "0,0" });

            WinFormsServicePort.Post(new Microsoft.Ccr.Adapters.WinForms.RunForm(StartForm));
        }

        private System.Windows.Forms.Form StartForm()
        {
            return new MotionForm(_mainPort, _state.Power);
        }

        private void MotorOnTimedEvent(object source, ElapsedEventArgs e)
        {
            SendStopMessage();
            _state.DrivingState = DrivingStates.Stopped;
        }

        private void FakeEncoderOnTimedEvent(object source, ElapsedEventArgs e)
        {
            switch (_state.DrivingState)
            {
                case DrivingStates.Stopped:
                    break;
                case DrivingStates.MovingForward:
                    encoderCounter++;
                    break;
                case DrivingStates.MovingBackward:
                    encoderCounter--;
                    break;
                case DrivingStates.CalibratingDrive:
                    encoderCounter++;
                    break;
                case DrivingStates.CalibratingTurn:
                    encoderCounter--;
                    break;
                case DrivingStates.CalibratingLeftTurn:
                    encoderCounter++;
                    break;
                case DrivingStates.TurningLeft:
                    encoderCounter++;
                    break;
                case DrivingStates.TurningRight:
                    encoderCounter--;
                    break;
                default:
                    break;
            }
        }

        private void EncoderOnTimedEvent(object source, ElapsedEventArgs e)
        {
            this.EncoderHandler(null);
        }

        double GetIRDistance()
        {
            return lastIrDistance;
        }

        int GetSuperFakeEncoder()
        {
            return encoderCounter;
        }

        double GetFakeIRDistance()
        {
            double distance = 0;

            WebClient client = new WebClient();
            String url = @"http://" + robotIP + @":50000/corobotir";

            //using (StreamReader reader = new StreamReader(file))
            using (StreamReader reader = new StreamReader(client.OpenRead(new Uri(url))))
            {
                String line;
                while ((line = reader.ReadLine()) != null)
                {
                    // Looking for <LastFrontRange>25.4</LastFrontRange>
                    // or <th>Front (Meters):</th><td>25.4</td>

                    //String startText = @"<th>Front (Meters):</th><td>";
                    //String endText = "</td>";

                    String startText = @"<LastFrontRange>";
                    String endText = "</LastFrontRange>";

                    int start = line.IndexOf(startText);

                    if (start >= 0)
                    {
                        int end = line.IndexOf(endText, start);

                        if (end >= start)
                        {
                            try
                            {
                                String result = line.Substring(start + startText.Length,
                                    end - start - startText.Length);

                                distance = double.Parse(result);
                            }
                            catch (ArgumentOutOfRangeException aoore)
                            {
                                Console.WriteLine(aoore.Message + System.Environment.NewLine +
                                    aoore.StackTrace);
                            }
                        }
                    }

                }
            }

            return distance;
        }

        private int GetFakeEncoderValue()
        {
            int encoderValue = 0;

            WebClient client = new WebClient();
            String url = @"http://" + robotIP + @":50000/corobotmotorencoders";

            //using (StreamReader reader = new StreamReader(file))
            using (StreamReader reader = new StreamReader(client.OpenRead(new Uri(url))))
            {
                String line;
                while ((line = reader.ReadLine()) != null)
                {

                    //<LeftValue>0</LeftValue>

                    String startText = @"<RightValue>";
                    String endText = @"</RightValue>";

                    if (USE_LEFT_ENCODERS)
                    {
                        startText = @"<LeftValue>";
                        endText = @"</LeftValue>";
                    }

                    int start = line.IndexOf(startText);

                    if (start >= 0)
                    {
                        int end = line.IndexOf(endText, start);

                        if (end >= start)
                        {
                            try
                            {
                                String result = line.Substring(start + startText.Length,
                                    end - start - startText.Length);

                                encoderValue = int.Parse(result);
                            }
                            catch (ArgumentOutOfRangeException aoore)
                            {
                                Console.WriteLine(aoore.Message + System.Environment.NewLine +
                                    aoore.StackTrace);
                            }
                        }
                    }

                }
            }

            return encoderValue;

        }

        private void InitializeWaypoints(string[] points)
        {
            waypoints = new LinkedList<Vector2>();
            foreach (string point in points)
            {
                string[] split = point.Split(',');
                double x = double.Parse(split[0]);
                double y = double.Parse(split[1]);
                waypoints.AddLast(new Vector2(x, y));
            }

        }

        private void BeginNextWaypoint()
        {
            checkNextWaypointScheduled = false;

            if (waypoints.Count == 0)
            {
                // Finished all waypoints
                Console.WriteLine("Finished all waypoints");

                if (myBeginWaypoint != null)
                {
                    myBeginWaypoint.ResponsePort.Post(new DefaultUpdateResponseType());
                    myBeginWaypoint = null;
                }

                SendStopMessage();
                return;
            }

            followingWaypoints = true;

            Vector2 driveVector = waypoints.First.Value.Subtract(prevWaypoint);
            amountToDrive = driveVector.Norm;
            amountToTurn = driveVector.Angle - prevHeading;
            if (amountToTurn < -Math.PI) amountToTurn += (2 * Math.PI);
            if (amountToTurn > Math.PI) amountToTurn -= (2 * Math.PI);
            //amountToTurn = GetWheelTurnDistance(amountToTurn);

            Console.WriteLine("Robot is at " + prevWaypoint.ToString() + ", facing " + ToDegrees(prevHeading));
            Console.WriteLine("Robot needs to turn " + ToDegrees(amountToTurn));

            //if (firstWaypoint)
            //{
            //    // Reduce first one by 10 percent
            //    amountToTurn *= .9;

            //    firstWaypoint = false;
            //}


            //if (waypoints.Count < 5)
            //{
            //    amountToTurn *= 2;
            //}

            if (amountToTurn != 0)
            {
                //SendTurnLeftMessage();
                _mainPort.Post(new Turn(new TurnRequest(amountToTurn, rotateRightPower)));

                amountToTurn = 0;
            }
            else
            {
                //SendDriveForwardMessage();
                _mainPort.Post(new Drive(new DriveRequest(amountToDrive, drivePower)));
                amountToDrive = 0;
            }
        }

        private void SetEncoderInterval(int m)
        {
            cbencoder.ResetEncodersMessage reset = new cbencoder.ResetEncodersMessage();
            reset.InSequenceNumber = 0;
            Activate(Arbiter.Choice(_encoderPort.ResetEncoders(reset),
                delegate(DefaultSubmitResponseType success) { LogInfo("Successfully reset encoders."); },
                delegate(Fault f) { LogError(f); }
            ));

            cbencoder.SetIntervalMessage newInterval = new cbencoder.SetIntervalMessage();
            newInterval.NewInterval = m;
            newInterval.InSequenceNumber = 0;
            Activate(Arbiter.Choice(_encoderPort.SetInterval(newInterval),
                delegate(DefaultSubmitResponseType success) { LogInfo("Sucessfully set encoder interval."); },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void StartEncoderTimer()
        {
            // Start encoder timer
            fakeEncoderTimer = new System.Timers.Timer();
            fakeEncoderTimer.Elapsed += new ElapsedEventHandler(FakeEncoderOnTimedEvent);
            fakeEncoderTimer.Interval = SUPER_FAKE_ENCODER_INTERVAL;
            fakeEncoderTimer.Enabled = true;
        }

        private void StopEncoderTimer()
        {

            // Stop encoder timer
            fakeEncoderTimer.Enabled = false;

        }

        private void SendTurnLeftMessage()
        {

            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = true;
            newState.Rotation = _state.Power;
            newState.Translation = 0;
            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success) { StartEncoderTimer(); },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void SendTurnRightMessage()
        {
            
            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = true;
            newState.Rotation = -_state.Power;
            newState.Translation = 0;
            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success) { StartEncoderTimer(); },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void SendDriveForwardMessage()
        {
            

            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = true;
            newState.Rotation = 0;
            newState.Translation = _state.Power;
            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success) { StartEncoderTimer(); },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void SendDriveBackwardMessage()
        {
            

            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = true;
            newState.Rotation = 0;
            newState.Translation = -_state.Power;
            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success) { StartEncoderTimer(); },
                delegate(Fault f) { LogError(f); }
            ));
        }

        private void CheckReachedWaypoint()
        {

            if (followingWaypoints && waypoints.Count > 0)
            {

                if (amountToDrive > 0)
                {
                    pendingDrive = true;
                }
                else
                {
                    pendingDrive = false;
                    // The last waypoint was complete, remove it and see if there are any more
                    prevHeading = waypoints.First.Value.Subtract(prevWaypoint).Angle;
                    prevWaypoint = waypoints.First.Value;

                    Console.WriteLine("Arrived at " + prevWaypoint.X + ", " + prevWaypoint.Y);
                    waypoints.RemoveFirst();

                    checkNextWaypointScheduled = true;
                }
            }
        }

        private void SendIRStopMessage()
        {

            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = false;
            newState.Rotation = 0;
            newState.Translation = 0;

            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success)
                {

                    
                    StopEncoderTimer();


                    // Dispatch finished signals
                    if (myDrive != null)
                    {
                        Console.WriteLine("Posting IR drive Fault");
                        myDrive.ResponsePort.Post(new Fault());
                        myDrive = null;
                    }

                    if (myTurn != null)
                    {
                        Console.WriteLine("Posting IR turn Fault");
                        myTurn.ResponsePort.Post(new Fault());
                        myTurn = null;
                    }
                },
                delegate(Fault f) { LogError(f); Console.WriteLine("Error in IR response"); }
            ));
        }

        private void SendStopMessage()
        {

            cbdrive.CoroBotDriveState newState = new cbdrive.CoroBotDriveState();
            newState.InSequenceNumber = 0;
            newState.DriveEnable = false;
            newState.Rotation = 0;
            newState.Translation = 0;

            Activate(Arbiter.Choice(_drivePort.Replace(newState),
                delegate(DefaultReplaceResponseType success)
                {
                    
                   StopEncoderTimer();
                   
                    // Dispatch finished signals
                    if (myDrive != null)
                    {
                        Console.WriteLine("Sending drive response.");
                        myDrive.ResponsePort.Post(new DefaultUpdateResponseType());
                        myDrive = null;
                    }

                    if (myTurn != null)
                    {
                        Console.WriteLine("Sending turn response.");
                        myTurn.ResponsePort.Post(new DefaultUpdateResponseType());
                        myTurn = null;
                    }
                },
                delegate(Fault f) { LogError(f); Console.WriteLine("Error when sending stop");  }
            ));
        }

        private void IrHandler(cbir.Replace notification)
        {
            lastIrDistance = notification.Body.LastFrontRange;
        }

        private void EncoderHandler(cbencoder.Replace notification)
        {
            int encoderValue = 0;

            if (usingRealRobot)
            {
                encoderValue = this.GetFakeEncoderValue();
            }
            else 
            {
                encoderValue = notification.Body.RightValue;

                if (USE_LEFT_ENCODERS)
                {
                    encoderValue = notification.Body.LeftValue;
                }
            }

            encoderValue = this.GetSuperFakeEncoder();

            int encoderChange = Math.Abs(encoderValue - oldEncoderValue);

            //int encoder = Math.Abs(GetFakeEncoderValue() - oldEncoderValue);

            //Console.WriteLine("Left distance is " + notification.Body.LeftDistance);
            //Console.WriteLine("Left change is " + notification.Body.LeftChange);
            //Console.WriteLine("Right distance is " + notification.Body.RightDistance);
            //Console.WriteLine("Encoder countdown is " + _state.EncoderCountdown);
            //Console.WriteLine("Encoder calibration is " + _state.EncoderCalibration);
            //Console.WriteLine("Encoder: " + encoderValue);

            oldEncoderValue = encoderValue;

            _state.EncoderCountdown -= encoderChange;
            _state.EncoderCalibration += encoderChange;

            switch (_state.DrivingState)
            {
                case DrivingStates.Stopped:
                    SendStopMessage();


                    if (amountToDrive > 0)
                    {
                        if (pendingDrive)
                        {
                            // We finished turning, now need to drive straight to destination
                            _mainPort.Post(new Drive(new DriveRequest(amountToDrive, drivePower)));
                            amountToDrive = 0;
                        }
                        else
                        {
                            pendingDrive = false;
                        }
                    }

                    if (checkNextWaypointScheduled)
                    {
                        BeginNextWaypoint();
                    }

                    break;
                case DrivingStates.MovingForward:

                    //Console.Write("LeftValue is " + oldEncoderValue + "; ");

                    if (_state.EncoderCountdown <= 0)
                    {
                        Console.WriteLine("Finished moving forward, encoder calibration is "
                            + _state.EncoderCalibration);
                        _state.DrivingState = DrivingStates.Stopped;
                        SendStopMessage();

                        CheckReachedWaypoint();
                    }
                    else
                    {
                        Console.WriteLine("Moving forward, encoder is " + encoderValue);

                        // Check whether we're close to an obstacle
                        double irDistance = 10000;

                        if (usingRealRobot)
                        {
                            irDistance = this.GetFakeIRDistance();
                        }
                        else
                        {

                            irDistance = this.GetIRDistance();
                        }

                        if (irDistance <= IR_CLOSE_DISTANCE)
                        {
                            // Robot is close to some obstacle, go backwards a bit
                            Console.WriteLine("IR distance is " + irDistance + ", Robot is too close to an obstacle, backing up...");
                            //_drivePort.Post(new Drive(new DriveRequest(-1 * DISTANCE_TO_REVERSE, drivePower)));

                            SendIRStopMessage();
                            _state.DrivingState = DrivingStates.Stopped;
                        }
                        else
                        {
                            SendDriveForwardMessage();
                        }
                    }

                    break;
                case DrivingStates.MovingBackward:

                    //Console.Write("LeftValue is " + oldEncoderValue + "; ");

                    if (_state.EncoderCountdown <= 0)
                    {
                        Console.WriteLine("Finished moving backward, encoder calibration is "
                            + _state.EncoderCalibration);

                        _state.DrivingState = DrivingStates.Stopped;
                        SendStopMessage();

                        CheckReachedWaypoint();

                    }
                    else
                    {
                        //Console.WriteLine("Moving backward, encoder countdown is " + _state.EncoderCountdown);

                        SendDriveBackwardMessage();
                    }
                    break;
                case DrivingStates.CalibratingDrive:
                    SendDriveForwardMessage();

                    break;
                case DrivingStates.CalibratingTurn:
                    SendTurnRightMessage();
                    break;
                case DrivingStates.CalibratingLeftTurn:
                    SendTurnLeftMessage();
                    break;
                case DrivingStates.TurningLeft:

                    //Console.Write("LeftValue is " + oldEncoderValue + "; ");

                    if (_state.EncoderCountdown <= 0)
                    {
                        Console.WriteLine("Finished turning left, encoder calibration is "
                            + _state.EncoderCalibration);

                        _state.DrivingState = DrivingStates.Stopped;
                        SendStopMessage();

                        CheckReachedWaypoint();

                    }
                    else
                    {
                        //Console.WriteLine("Turning left, encoder countdown is " + _state.EncoderCountdown);

                        SendTurnLeftMessage();
                    }
                    break;
                case DrivingStates.TurningRight:

                    //Console.Write("LeftValue is " + oldEncoderValue + "; ");

                    if (_state.EncoderCountdown <= 0)
                    {
                        Console.WriteLine("Finished turning right, encoder calibration is "
                            + _state.EncoderCalibration);

                        _state.DrivingState = DrivingStates.Stopped;
                        SendStopMessage();

                        CheckReachedWaypoint();

                    }
                    else
                    {
                        //Console.WriteLine("Turning right, encoder countdown is " + _state.EncoderCountdown);

                        SendTurnRightMessage();
                    }
                    break;
                default:
                    break;
            }
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> DriveHandler(Drive drive)
        {

            myDrive = drive;

            if (drive.Body.Power != 0)
            {
                _state.Power = drive.Body.Power;
            }
    
            // Override argument
            _state.Power = drivePower;

            _state.EncoderCalibration = 0;
            _state.EncoderCountdown = _state.DistanceCalibration * Math.Abs(drive.Body.Distance);

            Console.WriteLine("Distance calibration is " + _state.DistanceCalibration);
            Console.WriteLine("Encoder countdown set to " + _state.EncoderCountdown);

            if (drive.Body.Distance > 0)
            {
                _state.DrivingState = DrivingStates.MovingForward;
            }
            else
            {
                _state.DrivingState = DrivingStates.MovingBackward;
            }

            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> TurnHandler(Turn turn)
        {

            myTurn = turn;

            if (turn.Body.Power != 0)
            {
                _state.Power = turn.Body.Power;
            }

            // Override argument
            _state.Power = rotateRightPower;

            _state.EncoderCalibration = 0;

            if (turn.Body.Radians > 0)
            {
                _state.EncoderCountdown = _state.TurningLeftCalibration * Math.Abs(turn.Body.Radians);
                _state.DrivingState = DrivingStates.TurningLeft;


                // Use left power
                _state.Power = rotateLeftPower;
            }
            else
            {
                _state.EncoderCountdown = _state.TurningCalibration * Math.Abs(turn.Body.Radians);
                _state.DrivingState = DrivingStates.TurningRight;

                // Use right power
                _state.Power = rotateRightPower;
            }

            Console.WriteLine("Encoder countdown set to " + _state.EncoderCountdown);
            turn.ResponsePort.Post(new DefaultUpdateResponseType());
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> StopHandler(Stop stop)
        {
            _state.DrivingState = DrivingStates.Stopped;
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> BeginCalibrateDriveHandler(BeginCalibrateDrive calibrate)
        {
            _state.Power = drivePower;
            _state.EncoderCalibration = 0;
            _state.DrivingState = DrivingStates.CalibratingDrive;
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> BeginCalibrateTurnHandler(BeginCalibrateTurn calibrate)
        {
            _state.Power = rotateRightPower;
            _state.EncoderCalibration = 0;
            _state.DrivingState = DrivingStates.CalibratingTurn;

            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> BeginCalibrateLeftHandler(BeginCalibrateLeft calibrate)
        {
            _state.Power = rotateLeftPower;
            _state.EncoderCalibration = 0;
            _state.DrivingState = DrivingStates.CalibratingLeftTurn;
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> BeginWaypointHandler(BeginWaypoint calibrate)
        {
            Console.WriteLine("Beginning waypoint navigation");
            
            // Save the waypoint object so we can send a success message later
            myBeginWaypoint = calibrate;

            prevWaypoint = new Vector2(calibrate.Body.PrevWaypoint);
            prevHeading = calibrate.Body.PrevHeading;

            // Convert all Point objects to Vector2
            waypoints = new LinkedList<Vector2>();

            foreach (PointF p in calibrate.Body.Waypoints)
            {
                Vector2 v = new Vector2(p);
                waypoints.AddLast(v);
            }


            firstWaypoint = true;

            BeginNextWaypoint();

            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> SetDriveCalibrationHandler(SetDriveCalibration calibrate)
        {
            _state.DistanceCalibration = _state.EncoderCalibration / calibrate.Body.Distance;

            TimeSpan duration = calibrate.Body.CalibrateTimespan;

            Console.WriteLine("Finished drive calibration: encoderCalib was " + _state.EncoderCalibration +
                " and distance was " + calibrate.Body.Distance + ", so distanceCalib set to " + _state.DistanceCalibration);

            //MessageBox.Show("Time was " + duration.TotalMilliseconds + " ms");
            Console.WriteLine("Time was " + duration.TotalMilliseconds + " ms");
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> SetManualCalibrationHandler(SetManualCalibration calibrate)
        {
            // 1 meter
            _state.DistanceCalibration = calibrate.Body.DistanceEncoder;

            // 360 degrees
            _state.TurningCalibration = calibrate.Body.TurnEncoder / (2 * Math.PI);

            _state.TurningLeftCalibration = calibrate.Body.TurnLeftEncoder / (2 * Math.PI);

            Console.WriteLine("Manual calibration: one meter set to " + _state.DistanceCalibration
               + "\n360 degrees Right set to " + _state.TurningCalibration + "\n360 degrees Left set to " + _state.TurningLeftCalibration);

            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> SetTurnCalibrationHandler(SetTurnCalibration calibrate)
        {

            _state.TurningCalibration = _state.EncoderCalibration / calibrate.Body.Radians;

            Console.WriteLine("Finished turn calibration: encoderCalib was " + _state.EncoderCalibration +
    " and turn was " + (calibrate.Body.Radians * 180 / 3.14) + ", so turn set to " + _state.TurningCalibration);


            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> SetLeftCalibrationHandler(SetLeftCalibration calibrate)
        {
            _state.TurningLeftCalibration = _state.EncoderCalibration / calibrate.Body.Radians;

            Console.WriteLine("Finished turn left calibration: encoderCalib was " + _state.EncoderCalibration +
    " and turn was " + (calibrate.Body.Radians * 180 / 3.14) + ", so left turn set to " + _state.TurningLeftCalibration);
            yield break;
        }
        
        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }

        public double ToDegrees(double radians)
        {
            return radians / Math.PI * 180;
        }
    }


}
