//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using pxblobtrackercalibrate = Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy;
using reflection = System.Reflection;


namespace Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy
{
    
    
    /// <summary>
    /// BlobTrackerCalibrate Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the BlobTrackerCalibrate service
        public const String Identifier = "http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// Blob Tracker Calibrate State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("BlobTrackerCalibrateState", Namespace="http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.html")]
    public class BlobTrackerCalibrateState : ICloneable, IDssSerializable
    {
        
        private Boolean _processing;
        
        /// <summary>
        /// Processing
        /// </summary>
        [DataMember()]
        public Boolean Processing
        {
            get
            {
                return this._processing;
            }
            set
            {
                this._processing = value;
            }
        }
        
        /// <summary>
        /// Copy To Blob Tracker Calibrate State
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            BlobTrackerCalibrateState typedTarget = target as BlobTrackerCalibrateState;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.Processing = this.Processing;
        }
        
        /// <summary>
        /// Clone Blob Tracker Calibrate State
        /// </summary>
        public virtual object Clone()
        {
            BlobTrackerCalibrateState target = new BlobTrackerCalibrateState();

            target.Processing = this.Processing;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(Processing);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            Processing = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Update Processing Request
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("UpdateProcessingRequest", Namespace="http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.html")]
    public class UpdateProcessingRequest : ICloneable, IDssSerializable
    {
        
        private Boolean _processing;
        
        /// <summary>
        /// Update Processing Request
        /// </summary>
        public UpdateProcessingRequest()
        {
        }
        
        /// <summary>
        /// Update Processing Request
        /// </summary>
        public UpdateProcessingRequest(bool processing)
        {
            this._processing = processing;
        }
        
        /// <summary>
        /// Processing
        /// </summary>
        [DataMember()]
        [DataMemberConstructorAttribute()]
        public Boolean Processing
        {
            get
            {
                return this._processing;
            }
            set
            {
                this._processing = value;
            }
        }
        
        /// <summary>
        /// Copy To Update Processing Request
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            UpdateProcessingRequest typedTarget = target as UpdateProcessingRequest;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.Processing = this.Processing;
        }
        
        /// <summary>
        /// Clone Update Processing Request
        /// </summary>
        public virtual object Clone()
        {
            UpdateProcessingRequest target = new UpdateProcessingRequest();

            target.Processing = this.Processing;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(Processing);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            Processing = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Blob Tracker Calibrate Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class BlobTrackerCalibrateOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, UpdateProcessing>
    {
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<BlobTrackerCalibrateState,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<BlobTrackerCalibrateState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Update Processing Request
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateProcessing(bool processing)
        {
            UpdateProcessingRequest body = new UpdateProcessingRequest( processing);
            UpdateProcessing op = new UpdateProcessing(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Update Processing and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateProcessing(UpdateProcessingRequest body)
        {
            UpdateProcessing op = new UpdateProcessing();
            op.Body = body ?? new UpdateProcessingRequest();
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Gets the current state of the training service.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [Description("Gets the current state of the training service.")]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<BlobTrackerCalibrateState, Fault>>
    {
        
        /// <summary>
        /// Gets the current state of the training service.
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Gets the current state of the training service.
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Gets the current state of the training service.
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<BlobTrackerCalibrateState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Update Processing
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateProcessing : Microsoft.Dss.ServiceModel.Dssp.Update<UpdateProcessingRequest, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>>
    {
        
        /// <summary>
        /// Update Processing
        /// </summary>
        public UpdateProcessing()
        {
        }
        
        /// <summary>
        /// Update Processing
        /// </summary>
        public UpdateProcessing(UpdateProcessingRequest body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Update Processing
        /// </summary>
        public UpdateProcessing(UpdateProcessingRequest body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
